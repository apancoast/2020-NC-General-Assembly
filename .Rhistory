install.packages(rvest)
install.packages("rvest")
library(tidyverse)
library(rvest)
candidate_pages <- tibble(page_num = 1:7)
candidate_pages <- candidate_pages %>%
mutate(page = paste0("https://www.transparencyusa.org/nc/candidates?by=candidateOfficeHeld&order=desc&page=", page_num))
### GET CANDIDATE'S PAGES ###
get_candidates <- function(page) {
page <- read_html(page)
page %>%
html_nodes(".table-hover a") %>%
html_attr("href") %>%
as_tibble() %>%
transmute(links = paste0("https://www.transparencyusa.org", value, "/donors?by=donorTypeCode", sep=""))
}
#Scrape candidate links
candidate_pages <- candidate_pages %>%
mutate(links = map(page, get_candidates))
candidate_pages <- candidate_pages %>%
unnest(links)
View(candidate_pages)
get_district = function(links) {
links <- read_html(links)
links %>%
html_nodes(".profile-subtitle span") %>%
html_text() %>%
as_tibble() %>%
rename("district" = "value")
}
#scrap districts
candidates <- candidate_pages %>%
mutate(district = map(links, get_district))
candidate_pages <- tibble(page_num = 1:7)
candidate_pages <- candidate_pages %>%
mutate(page = paste0("https://www.transparencyusa.org/nc/candidates?by=candidateOfficeHeld&order=desc&page=", page_num))
### GET CANDIDATE'S PAGES ###
get_candidates <- function(page) {
page <- read_html(page)
page %>%
html_nodes(".table-hover a") %>%
html_attr("href") %>%
as_tibble() %>%
transmute(links = paste0("https://www.transparencyusa.org", value, "/donors?by=donorTypeCode", sep=""))
}
#Scrape candidate links
candidate_pages <- candidate_pages %>%
mutate(links = map(page, get_candidates))
candidate_pages <- candidate_pages %>%
unnest(links)
get_district = function(links) {
links <- read_html(links)
links %>%
html_nodes(".profile-subtitle span") %>%
html_text() %>%
as_tibble() %>%
rename("district" = "value")
}
#scrap districts
candidates <- candidate_pages %>%
mutate(district = map(links, get_district))
candidate_pages <- candidates %>%
unnest(district)
View(candidate_pages)
120 + 50 =
120+50
120+50=
#### NEW and not working ####
get_tot_donations = function(links) {
links <- read_html(links)
links %>%
html_nodes(".hide-tablet+ .number") %>%
html_text() %>%
as_tibble()
}
(120+50)
#170 Districts (120 reps + 50 senators) so let's confirm we got all of them
candidate_pages %>%
str_count(district, pattern = "District")
#170 Districts (120 reps + 50 senators) so let's confirm we got all of them
candidate_pages %>%
str_count(pattern = "District")
candidate_pages <- tibble(page_num = 1:7)
candidate_pages <- candidate_pages %>%
mutate(page = paste0("https://www.transparencyusa.org/nc/candidates?by=candidateOfficeHeld&order=desc&page=", page_num))
### GET CANDIDATE'S PAGES ###
get_candidates <- function(page) {
page <- read_html(page)
page %>%
html_nodes(".table-hover a") %>%
html_attr("href") %>%
as_tibble() %>%
transmute(links = paste0("https://www.transparencyusa.org", value, "/donors?by=donorTypeCode", sep=""))
}
#Scrape candidate links
candidate_pages <- candidate_pages %>%
mutate(links = map(page, get_candidates))
candidate_pages <- candidate_pages %>%
unnest(links)
get_district = function(links) {
links <- read_html(links)
links %>%
html_nodes(".profile-subtitle span") %>%
html_text() %>%
as_tibble() %>%
rename("district" = "value")
}
#scrap districts
candidates <- candidate_pages %>%
mutate(district = map(links, get_district))
candidate_pages <- candidates %>%
unnest(district)
#170 Districts (120 reps + 50 senators) so let's confirm we got all of them
candidate_pages %>%
str_count(pattern = "District")
candidate_pages <- tibble(page_num = 1:7)
candidate_pages <- candidate_pages %>%
mutate(page = paste0("https://www.transparencyusa.org/nc/candidates?by=candidateOfficeHeld&order=desc&page=", page_num))
### GET CANDIDATE'S PAGES ###
get_candidates <- function(page) {
page <- read_html(page)
page %>%
html_nodes(".table-hover a") %>%
html_attr("href") %>%
as_tibble() %>%
transmute(links = paste0("https://www.transparencyusa.org", value, "/donors?by=donorTypeCode", sep=""))
}
#Scrape candidate links
candidate_pages <- candidate_pages %>%
mutate(links = map(page, get_candidates))
candidate_pages <- candidate_pages %>%
unnest(links)
get_district = function(links) {
links <- read_html(links)
links %>%
html_nodes(".profile-subtitle span") %>%
html_text() %>%
as_tibble() %>%
rename("district" = "value")
}
#scrap districts
candidates <- candidate_pages %>%
mutate(district = map(links, get_district))
candidate_pages <- candidates %>%
unnest(district)
#170 Districts (120 reps + 50 senators) so let's confirm we got all of them
candidate_pages %>%
str_count(pattern = "District")
View(candidate_pages)
#170 Districts (120 reps + 50 senators) so let's confirm we got all of them
candidate_pages %>%
str_count(pattern = "Senate")
#170 Districts (120 reps + 50 senators) so let's confirm we got all of them
candidate_pages %>%
str_count(pattern = "Senate") %>%  View()
#170 Districts (120 reps + 50 senators) so let's confirm we got all of them
candidate_pages %>%
str_count(pattern = "Representatives")
#170 Districts (120 reps + 50 senators) so let's confirm we got all of them
candidate_pages %>%
str_count(pattern = "Representative")
View(candidate_pages)
47 +155
115+47
candidate_pages %>%
select(str_count(pattern = "District"))
#170 Districts (120 reps + 50 senators) so let's confirm we got all of them
check <- candidate_pages %>%
filter(grepl('District', district))
View(check)
View(check)
library(tidyverse)
library(rvest)
### GET PAGES OF CANDIDATES ###
candidate_pages <- tibble(page_num = 1:8)
candidate_pages <- candidate_pages %>%
mutate(page = paste0("https://www.transparencyusa.org/nc/candidates?cycle=2020-election-cycle&by=candidateOfficeHeld&order=desc", page_num))
### GET CANDIDATE'S PAGES ###
get_candidates <- function(page) {
page <- read_html(page)
page %>%
html_nodes(".table-hover a") %>%
html_attr("href") %>%
as_tibble() %>%
transmute(links = paste0("https://www.transparencyusa.org", value, "/donors?by=donorTypeCode", sep=""))
}
#Scrape candidate links
candidate_pages <- candidate_pages %>%
mutate(links = map(page, get_candidates))
candidate_pages <- candidate_pages %>%
unnest(links)
View(candidate_pages)
candidate_pages <- tibble(page_num = 1:8)
candidate_pages <- candidate_pages %>%
mutate(page = paste0("https://www.transparencyusa.org/nc/candidates?cycle=2020-election-cycle&by=candidateOfficeHeld&order=desc", page_num))
### GET CANDIDATE'S PAGES ###
get_candidates <- function(page) {
page <- read_html(page)
page %>%
html_nodes(".table-hover a") %>%
html_attr("href") %>%
as_tibble() %>%
transmute(links = paste0("https://www.transparencyusa.org", value, "/donors?by=donorTypeCode", sep=""))
}
#Scrape candidate links
candidate_pages <- candidate_pages %>%
mutate(links = map(page, get_candidates))
candidate_pages <- candidate_pages %>%
unnest(links)
get_district = function(links) {
links <- read_html(links)
links %>%
html_nodes(".profile-subtitle span") %>%
html_text() %>%
as_tibble() %>%
rename("district" = "value")
}
#scrap districts
candidates <- candidate_pages %>%
mutate(district = map(links, get_district))
candidate_pages <- tibble(page_num = 1:8)
candidate_pages <- candidate_pages %>%
mutate(page = paste0("https://www.transparencyusa.org/nc/candidates?cycle=2020-election-cycle&by=candidateOfficeHeld&order=desc", page_num))
### GET CANDIDATE'S PAGES ###
get_candidates <- function(page) {
page <- read_html(page)
page %>%
html_nodes(".table-hover a") %>%
html_attr("href") %>%
as_tibble() %>%
transmute(links = paste0("https://www.transparencyusa.org", value, "/donors?by=donorTypeCode", sep=""))
}
#Scrape candidate links
candidate_pages <- candidate_pages %>%
mutate(links = map(page, get_candidates))
candidate_pages <- tibble(page_num = 1:8)
candidate_pages <- candidate_pages %>%
mutate(page = paste0("https://www.transparencyusa.org/nc/candidates?cycle=2020-election-cycle&by=candidateOfficeHeld&order=desc", page_num))
### GET CANDIDATE'S PAGES ###
get_candidates <- function(page) {
page <- read_html(page)
page %>%
html_nodes(".table-hover a") %>%
html_attr("href") %>%
as_tibble() %>%
transmute(links = paste0("https://www.transparencyusa.org", value, "/donors?by=donorTypeCode", sep=""))
}
#Scrape candidate links
candidate_pages <- candidate_pages %>%
mutate(links = map(page, get_candidates))
rlang::last_error()
#scrap districts
candidates <- candidate_pages %>%
mutate(district = map(links, get_district))
### GET PAGES OF CANDIDATES ###
candidate_pages <- tibble(page_num = 1:8)
candidate_pages <- candidate_pages %>%
mutate(page = paste0("https://www.transparencyusa.org/nc/candidates?cycle=2020-election-cycle&by=candidateOfficeHeld&order=desc", page_num))
### GET CANDIDATE'S PAGES ###
get_candidates <- function(page) {
page <- read_html(page)
page %>%
html_nodes(".table-hover a") %>%
html_attr("href") %>%
as_tibble() %>%
transmute(links = paste0("https://www.transparencyusa.org", value, "/donors?by=donorTypeCode", sep=""))
}
#Scrape candidate links
candidate_pages <- candidate_pages %>%
mutate(links = map(page, get_candidates))
candidate_pages <- candidate_pages %>%
unnest(links)
get_district = function(links) {
links <- read_html(links)
links %>%
html_nodes(".profile-subtitle span") %>%
html_text() %>%
as_tibble() %>%
rename("district" = "value")
}
#scrap districts
candidates <- candidate_pages %>%
mutate(district = map(links, get_district))
library(tidyverse)
library(rvest)
### GET PAGES OF CANDIDATES ###
candidate_pages <- tibble(page_num = 1:8)
candidate_pages <- candidate_pages %>%
mutate(page = paste0("https://www.transparencyusa.org/nc/candidates?cycle=2020-election-cycle&by=candidateOfficeHeld&order=desc", page_num))
### GET CANDIDATE'S PAGES ###
get_candidates <- function(page) {
page <- read_html(page)
page %>%
html_nodes(".table-hover a") %>%
html_attr("href") %>%
as_tibble() %>%
transmute(links = paste0("https://www.transparencyusa.org", value, "/donors?by=donorTypeCode", sep=""))
}
#Scrape candidate links
candidate_pages <- candidate_pages %>%
mutate(links = map(page, get_candidates))
candidate_pages <- candidate_pages %>%
unnest(links)
get_district = function(links) {
links <- read_html(links)
links %>%
html_nodes(".profile-subtitle span") %>%
html_text() %>%
as_tibble() %>%
rename("district" = "value")
}
#scrap districts
candidates <- candidate_pages %>%
mutate(district = map(links, get_district))
View(candidate_pages)
#I'll need to manually enter missing members. I could do a join that leaves only unmatched
?anti_join()
confirm <-
mutate(district = "North Carolina House of Representatives District")
confirm <- tibble(
district = "North Carolina House of Representatives District")
confirm <- tibble(
district = "North Carolina House of Representatives District") %>%
numbers = 1:120
confirm <- tibble(
district = "North Carolina House of Representatives District" %>%
numbers = 1:120)
confirm <- tibble(
district = "North Carolina House of Representatives District" %>%
numbers = "1:120")
confirm <- tibble(
district = "North Carolina House of Representatives District",
numbers = 1:120)
house <- tibble(
district = "North Carolina House of Representatives District",
numbers = 1:120)
senate <- tibble(
district = "North Carolina State Senate District",
numbers = 1:50
)
house %>%
unite(district:numbers)
?unite()
house <- tibble(
loc = "North Carolina House of Representatives District",
numbers = 1:120
)
house %>%
unite(district, loc:numbers)
house %>%
unite(district, loc:numbers, sep = " ", remove = TRUE)
house <- house %>%
unite(district, loc:numbers, sep = " ", remove = TRUE)
senate <- senate %>%
unite(district, loc:numbers, sep=" ", remove = TRUE)
senate <- tibble(
loc = "North Carolina State Senate District",
numbers = 1:50
)
senate <- senate %>%
unite(district, loc:numbers, sep=" ", remove = TRUE)
check <- bind_rows(house, senate)
check <- bind_rows(house, senate)
#scrap districts
candidates <- candidate_pages %>%
mutate(district = map(links, get_district))
rlang::last_error()
rlang::last_trace()
library(tidyverse)
library(rvest)
### GET PAGES OF CANDIDATES ###
candidate_pages <- tibble(page_num = 1:8)
candidate_pages <- candidate_pages %>%
mutate(page = paste0("https://www.transparencyusa.org/nc/candidates?cycle=2020-election-cycle&by=candidateOfficeHeld&order=desc", page_num))
### GET CANDIDATE'S PAGES ###
get_candidates <- function(page) {
page <- read_html(page)
page %>%
html_nodes(".table-hover a") %>%
html_attr("href") %>%
as_tibble() %>%
transmute(links = paste0("https://www.transparencyusa.org", value, "/donors?by=donorTypeCode", sep=""))
}
#Scrape candidate links
candidate_pages <- candidate_pages %>%
mutate(links = map(page, get_candidates))
candidate_pages <- candidate_pages %>%
unnest(links)
get_district = function(links) {
links <- read_html(links)
links %>%
html_nodes(".profile-subtitle span") %>%
html_text() %>%
as_tibble() %>%
rename("district" = "value")
}
#scrap districts
candidates <- candidate_pages %>%
mutate(district = map(links, get_district))
candidate_pages <- candidates %>%
unnest(district)
#scrap districts
candidates <- candidate_pages %>%
mutate(district = map(links, get_district))
#scrap districts
candidates <- candidate_pages %>%
mutate(district = map(links, get_district))
### GET PAGES OF CANDIDATES ###
candidate_pages <- tibble(page_num = 1:8)
candidate_pages <- candidate_pages %>%
mutate(page = paste0("https://www.transparencyusa.org/nc/candidates?cycle=2020-election-cycle&by=candidateOfficeHeld&order=desc", page_num))
#Scrape candidate links
candidate_pages <- candidate_pages %>%
mutate(links = map(page, get_candidates))
candidate_pages <- candidate_pages %>%
unnest(links)
#scrap districts
candidates <- candidate_pages %>%
mutate(district = map(links, get_district))
candidate_pages <- candidates %>%
unnest(district)
candidates %>%
unnest(district)
View(candidates)
library(tidyverse)
library(rvest)
### GET CANDIDATE'S PAGES ###
get_candidates <- function(page) {
page <- read_html(page)
page %>%
html_nodes(".table-hover a") %>%
html_attr("href") %>%
as_tibble() %>%
transmute(links = paste0("https://www.transparencyusa.org", value, "/donors?by=donorTypeCode", sep=""))
}
get_district = function(links) {
links <- read_html(links)
links %>%
html_nodes(".profile-subtitle span") %>%
html_text() %>%
as_tibble() %>%
rename("district" = "value")
}
### GET PAGES OF CANDIDATES ###
candidate_pages <- tibble(page_num = 1:8)
candidate_pages <- candidate_pages %>%
mutate(page = paste0("https://www.transparencyusa.org/nc/candidates?cycle=2020-election-cycle&by=candidateOfficeHeld&order=desc", page_num))
#scrap districts
candidates <- candidate_pages %>%
mutate(district = map(links, get_district))
page <- read_html(page)
candidate_pages <- tibble(page_num = 1:8)
candidate_pages <- candidate_pages %>%
mutate(page = paste0("https://www.transparencyusa.org/nc/candidates?cycle=2020-election-cycle&by=candidateOfficeHeld&order=desc", page_num))
### GET CANDIDATE'S PAGES ###
get_candidates <- function(page) {
page <- read_html(page)
page %>%
html_nodes(".table-hover a") %>%
html_attr("href") %>%
as_tibble() %>%
transmute(links = paste0("https://www.transparencyusa.org", value, "/donors?by=donorTypeCode", sep=""))
}
#Scrape candidate links
candidate_pages <- candidate_pages %>%
mutate(links = map(page, get_candidates))
candidate_pages <- candidate_pages %>%
unnest(links)
get_district = function(links) {
links <- read_html(links)
links %>%
html_nodes(".profile-subtitle span") %>%
html_text() %>%
as_tibble() %>%
rename("district" = "value")
}
#scrap districts
candidates <- candidate_pages %>%
mutate(district = map(links, get_district))
candidate_pages <- candidates %>%
unnest(district)
